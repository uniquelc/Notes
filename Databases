mysql> show databases;  //显示数据库
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sys                |
| test               |
+--------------------+
5 rows in set (0.00 sec)

mysql> use test;  //选择数据库
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
mysql> show tables;  //选择数据表
+----------------+
| Tables_in_test |
+----------------+
| address        |
| user           |
+----------------+
2 rows in set (0.00 sec)

mysql> select name="陆川",age*5 from address;
+---------------+-------+
| name="陆川"    | age*5 |
+---------------+-------+
|             1 |   115 |
+---------------+-------+
1 row in set (0.00 sec)

mysql> select * from address;
+--------+------+-------------+-----------------------+
| name   | age  | phonenumber | address               |
+--------+------+-------------+-----------------------+
| 陆川   |   23 | 1057331188  | 黑龙江哈尔滨市           |
+--------+------+-------------+-----------------------+
1 row in set (0.00 sec)

mysql> select name,age*5 from address;
+--------+-------+
| name   | age*5 |
+--------+-------+
| 陆川   |   115 |
+--------+-------+
1 row in set (0.00 sec)

mysql> select name,age*5 as age from address;
+--------+------+
| name   | age  |
+--------+------+
| 陆川   |  115 |
+--------+------+
1 row in set (0.00 sec)

mysql> select name,age*5 age from address;  //省略as
+--------+------+
| name   | age  |
+--------+------+
| 陆川   |  115 |
+--------+------+
1 row in set (0.00 sec)

mysql> select name from address where age=23;  //查询address数据表中年龄23岁的名字
+--------+
| name   |
+--------+
| 陆川   |
+--------+
1 row in set (0.00 sec)

mysql> select name from address where age>10;
+--------+
| name   |
+--------+
| 陆川   |
+--------+
1 row in set (0.00 sec)

mysql> select name from address where age>10 and age<30;
+--------+
| name   |
+--------+
| 陆川   |
+--------+
1 row in set (0.00 sec)

mysql>  select address from address where address is null;
+---------+
| address |
+---------+
| NULL    |
+---------+
1 row in set (0.00 sec)

mysql> select age from address where age = 23 or age = 26;  //找出address数据表中年龄等于23或26的
+------+
| age  |
+------+
|   23 |
|   26 |
+------+
2 rows in set (0.00 sec)

mysql> select age from address where age in (23,26);  //等同于上面
+------+
| age  |
+------+
|   23 |
|   26 |
+------+
2 rows in set (0.00 sec)

//  '%'代表多个字符，'_'代表一个字符
mysql> select age from address where age like "%2%";  //模糊查询，找出年龄中有带2数字的
+------+
| age  |
+------+
|   23 |
|   26 |
+------+
2 rows in set (0.00 sec)

mysql> select age from address where age like "_3%";  //找出年龄中第二个字母为3的
+------+
| age  |
+------+
|   23 |
+------+
1 row in set (0.00 sec)

mysql> select age from address order by age;  //按年龄排序，默认升序(asc)
+------+
| age  |
+------+
|   23 |
|   26 |
+------+
2 rows in set (0.00 sec)

mysql> select age from address order by age desc;  //按年龄排序，desc表示降序
+------+
| age  |
+------+
|   26 |
|   23 |
+------+
2 rows in set (0.00 sec)

mysql> select name,age from address order by age, name desc;  //年龄按升序排列，名字按降序排列。order by 后用逗号分割，越靠前的字段起得作用越大
+-----------+------+
| name      | age  |
+-----------+------+
| 陆川      |   23 |
| 周润发    |   26 |
| 刘德华    |   26 |
+-----------+------+
3 rows in set (0.00 sec)

mysql> select name,age from address order by 2;  //根据第二段关键字也就是年龄排序
+-----------+------+
| name      | age  |
+-----------+------+
| 陆川      |   23 |
| 刘德华    |   26 |
| 周润发    |   26 |
+-----------+------+
3 rows in set (0.00 sec)

执行顺序
select
    *   .......3
from
    tablename..1
where
    条件........2
order by
    ...........4

//分组函数（对某一组处理）
//分组函数主动忽略null
sum求和
count计数
avg平均值
min最小值
max最大值

mysql> select sum(age) as age from address;  //
+------+
| age  |
+------+
|   75 |
+------+
1 row in set (0.01 sec)

mysql> select max(age) from address;
+----------+
| max(age) |
+----------+
|       26 |
+----------+
1 row in set (0.00 sec)

mysql> select count(name) from address;  //总共3个名字，计数
+-------------+
| count(name) |
+-------------+
|           3 |
+-------------+
1 row in set (0.00 sec)

mysql> select ifnull(age,0) from address;  //ifnull（单行处理函数）（可能为null的值，该怎么处理）
+---------------+
| ifnull(age,0) |
+---------------+
|            23 |
|             0 |
|            26 |
+---------------+
3 rows in set (0.00 sec)

mysql> select sum(ifnull(age,0)) from address;
+--------------------+
| sum(ifnull(age,0)) |
+--------------------+
|                 49 |
+--------------------+
1 row in set (0.00 sec)

mysql> select sum(age) from address;  //分组函数自动忽略null
+----------+
| sum(age) |
+----------+
|       49 |
+----------+
1 row in set (0.00 sec)

/*
count(*):表示总记录条数
count(某个字段):表示某个字段中不为null的数据总数量
*/

/*
group by:按照某个或者某些字段进行分组,如果sql语句中没有group by语句，那么此表会自成一组
当一个SQL语句中有group by的时候，select后面只能跟分组函数和参与分组的字段
having:对分组之后的数据再次过滤

mysql> select name,max(age) from address group by name;  //按名字分组的年龄中最大值
+-----------+----------+
| name      | max(age) |
+-----------+----------+
| 陆川      |       23 |
| 刘德华    |     NULL |
| 周润发    |       26 |
+-----------+----------+
3 rows in set (0.00 sec)

mysql> select name,phonenumber,max(age) from address group by name,phonenumber;  //多字段分组，找出不同名字不同电话（可能相同）年龄最大的人
+-----------+-------------+----------+
| name      | phonenumber | max(age) |
+-----------+-------------+----------+
| 陆川      | 1057331188  |       23 |
| 刘德华    | 18888888888 |     NULL |
| 周润发    | 18826267272 |       26 |
+-----------+-------------+----------+
3 rows in set (0.00 sec)

//where效率高，能用where就不用having

//查询语句语法总结
select
...      5
from
...      1
where
...      2
group by
...      3
having
...      4
order by
...      6


mysql> select distinct age from address;  //distinct去重查询
+------+
| age  |
+------+
|   23 |
| NULL |
|   26 |
+------+
3 rows in set (0.00 sec)

mysql> select u.id,a.age from user u,address a;  //查两个表
+----+------+
| id | age  |
+----+------+
|  3 |   23 |
|  2 |   23 |
|  1 |   23 |
|  3 | NULL |
|  2 | NULL |
|  1 | NULL |
|  3 |   26 |
|  2 |   26 |
|  1 |   26 |
+----+------+
9 rows in set (0.00 sec)

mysql> select u.name,n.name from user u,name n where u.id=n.id;  //等值连接，根据id筛选 SQL92语法
+------+-----------+
| name | name      |
+------+-----------+
| Paul | 刘德华    |
| Pal  | cc        |
| Pal  | 张学友    |
+------+-----------+
3 rows in set (0.00 sec)

mysql> select u.name,n.name from user u join name n on u.id=n.id;  //SQL99语法
+------+-----------+
| name | name      |
+------+-----------+
| Paul | 刘德华    |
| Pal  | cc        |
| Pal  | 张学友    |
+------+-----------+
3 rows in set (0.00 sec)


/*内连接和外连接
内连接：若A表和B表进行连接，使用内连接就是将B表中能和A表匹配的查询出来
外连接：若A表和B表进行连接，使用外连接，会有一个主表一个副表，主要查询主表中的数据，稍带查询副表中的数据，若副表中没有可以和主表中匹配上，副表自动模拟出NULL与之匹配
外连接最大的特点就是将主表中的数据全部插叙出来
*/

/*子查询（嵌套）
select
...(select)
from
...(select)
where
...(select)

mysql> select * from address where age > (select avg(age) from address);
+-----------+------+-------------+---------+
| name      | age  | phonenumber | address |
+-----------+------+-------------+---------+
| 周润发    |   26 | 18826267272 | NULL    |
+-----------+------+-------------+---------+
1 row in set (0.00 sec)


from后接子查询，from后等价与一个新表
select t*,s.grade from (select deptno,avg(sal) from emp group by deptno) t join salgrade s on t.avg(sal) between s.losal and s.hisal;

*/

//union将结果集在一起显示

//limit（重点） Mysql独有的分页查询
//limit取结果集中的部分数据
//语法   limit startindex(初始位置) length（取出的个数）

mysql> select name,age from address order by age limit 0,2;  //取前结果前两个数字 或者写成limit 2
+-----------+------+
| name      | age  |
+-----------+------+
| 刘德华    | NULL |
| 陆川      |   23 |
+-----------+------+
2 rows in set (0.00 sec)

通用分页标准（假如每页显示3个记录）
第一页：limit 0,3
第二页：limit 3,3
第三页：limit 6,3
...
第n页：limit (n-1)*3,3

常用数据类型：
int         整数型
bigint      长整型
float       浮点型
char        定长字符串
varchar     可变长字符串
//如果数据长度确定如生日，性别等就用char效率更高，不确定长度用varchar
date        日期类型
BLOB        二进制大对象（视频，图片等流媒体）
CLOB        字符大对象（文本，文档）

 - 表的复制：
create table 表名 as select...;
create table emp as select * from adderss;
 - 批量插入：
insert into table emp select & from address;  //将后面的查询结果插入到emp表中

 - update 表名 set 字段名1=值，字段名2=值 where...  （不加where添加全部）
将部门10的LOC改为SHANGHAI，部门名改为RENSHIBU
update emp set loc='SHANGHAI',dname='RENSHIBU' where deptno = 10;

 - delete from 表名 where...  (不加where删除所有记录)
truncate table 表名   (只留表头，不可回滚)

 - 约束
   * 非空约束（not null）：约束的字段不能为null
    * mysql> insert into t_user(id,password) values(1,'123');
      ERROR 1364 (HY000): Field 'username' doesn't have a default value  //非空约束了username，故不能为空
      
      mysql> insert into t_user(id,username,password) values(1,'list','123');
      Query OK, 1 row affected (0.01 sec)
      
   * 唯一约束（unique）：约束的字段不能重复，但可以为null
     *   mysql> drop table t_user;
         Query OK, 0 rows affected (0.02 sec)

         mysql> create table t_user(id int,usename varchar(255) unique);
         Query OK, 0 rows affected (0.03 sec)

         mysql> insert into t_user values(1,'abc');
         Query OK, 1 row affected (0.01 sec)

         mysql> insert into t_user values(1,'abc');
         ERROR 1062 (23000): Duplicate entry 'abc' for key 't_user.usename'
         
         mysql> create table t_user(id int,username varchar(255),usercode varchar(255),unique(usercode,username));  //联合添加一个约束
         Query OK, 0 rows affected (0.03 sec)

         mysql> create table t_user(id int,username varchar(255) unique,usercode varchar(255) unique);  //联合添加两个约束
         Query OK, 0 rows affected (0.03 sec)
         
         mysql> create table t_user(id int primary key auto_increment,username varchar(255));  //auto_increment表示主键自增
         Query OK, 0 rows affected (0.03 sec)

         mysql> insert into t_user(username) values('a'),('b');
         Query OK, 2 rows affected (0.01 sec)
         Records: 2  Duplicates: 0  Warnings: 0

         mysql> select * from t_user;
         +----+----------+
         | id | username |
         +----+----------+
         |  1 | a        |
         |  2 | b        |
         +----+----------+
         2 rows in set (0.00 sec)



   * 主键约束 (primary key)：约束的字段既不能为null也不能重复,主键位代表这一行在表中的唯一标识（一张表只能有一个主键）
   * 外键约束 (foreign key)：外键约束一定是主键或有唯一性的字段
     *   mysql> create table t_class(cno int,cname varchar(255),primary key(cno));  //创建父表
         Query OK, 0 rows affected (0.02 sec)

         mysql> create table t_student(sno int,sname varchar(255),classno int,foreign key(classno) references t_class(cno));  //创建爱你子表
         Query OK, 0 rows affected (0.03 sec)

