1.JDBC : Java Database Connectivity
2.JDBC编程六步：
  - 第一步：注册驱动（告诉Java要连接哪个品牌的数据库）
  - 第二步：获取连接（表示JVM进程和数据库的进程之间通道打开了，使用完要关闭通道）
  - 第三步：获取数据库操作对象（专门执行SQL语句的对象）
  - 第四步：执行SQL语句
  - 第五步：处理查询结果集（只有第四步执行了select语句的时候才有这步）
  - 第六步：释放资源
3.URL
  - URL包括：协议，ip地址，端口，资源名
  - localhost和127.0.0.1都是本机id地址
4.import java.sql.*;
  - 增删改
  public class Exercise {
      public static void main(String[] args){
          //绑定属性配置，假设本地有一个jdbc的文件记录url，user，password
          ResourceBundle bundle = new ResourceBundle("jdbc");
          String url = bundle.getString("url");
          String user = bundle.getString("user");
          String password = bundle.getString("password");
          Statement statement = null;
          Connection conn = null;
          try{
              //1.注册驱动
              Class.forName("com.mysql.jdbc.Driver");
              //DriverManager.registerDriver(new com.mysql.jdbc.Driver());  //第二种方法注册驱动
              //2.获取连接
              conn = DriverManager.getConnection(url,user,password);
              //3.获取数据库操作对象
              statement = conn.createStatement();
              String sql = "insert into student values(2,'1','刘德华','25')";
              //4.执行SQL语句
              int count = statement.executeUpdate(sql);  //executeUpdate()方法可以执行update,delete,insert
              System.out.println(count);
              System.out.println(count == 1 ? "保存成功" : "保存失败");
              //5.处理查询结果集
          }catch(SQLException e){
              e.printStackTrace();
          }catch(ClassNotFoundException e){
              e.printStackTrace();
          }finally{
              //6.释放资源
              //遵循执行顺序逆序释放
              //分别对其try...catch...
              try{
                  if (statement != null) statement.close();
              }catch (SQLException e){ e.printStackTrace(); }
              try{
                  if (conn != null) conn.close();
              }catch (SQLException e){ e.printStackTrace(); }
          }
      }
  }
  - 查询
  import java.sql.*;
  public class Exercise {
      public static void main(String[] args){
          Statement statement = null;
          Connection conn = null;
          ResultSet rs = null;
          try{
              //1.注册驱动
              Class.forName("com.mysql.jdbc.Driver");
              //2.获取连接
              String url = "jdbc:mysql://localhost:3306/test";
              String user = "root";
              String password = "Lc283500.";
              conn = DriverManager.getConnection(url,user,password);
              //3.获取数据库操作对象
              statement = conn.createStatement();
              String sql = "select * from student";
              //4.执行SQL语句
              rs = statement.executeQuery(sql);  //专门执行DQL语句的方法executeQuery()
              //5.处理查询结果集
              while (rs.next()){
                  //取数据
                  //getString()方法不管数据库中是什么数据结构都以string形式取出
                  String id = rs.getString("id");  //取的是查询结果的名字，不是表名
                  int sex = rs.getInt("sex");  //取出不同类型的数据
                  String name = rs.getString("name");
                  int age = rs.getInt("age");
                  System.out.println("id: " + id + " sex: " + sex + " name: " + name + " age: " + age);
              }
          }catch(SQLException e){
              e.printStackTrace();
          }catch (ClassNotFoundException e){
              e.printStackTrace();
          }finally{
              //6.释放资源
              //遵循执行顺序逆序释放
              //分别对其try...catch...
              try{
                  if (rs != null) rs.close();
              }catch (SQLException e){ e.printStackTrace(); }
              try{
                  if (statement != null) statement.close();
              }catch (SQLException e){ e.printStackTrace(); }
              try{
                  if (conn != null) conn.close();
              }catch (SQLException e){ e.printStackTrace(); }
          }
      }
  }
- 常用的方式
  * 查询数据库中是否有账号
  import java.sql.*;
  import java.util.HashMap;
  import java.util.Map;
  import java.util.Scanner;

  public class Loginouttesst {
      public static void main(String[] args) {
          //1.初始化UI
          Map<String, String> m = new HashMap<>();
          m = init();
          //2.验证用户和密码
          boolean loginSuccess = login(m);
          //3.输出结果
          System.out.println(loginSuccess==true ? "登陆成功" : "账号不存在或密码错误");
      }

      private static boolean login(Map<String, String> m) {
          Connection coo = null;
          PreparedStatement ps = null;
          ResultSet rs = null;
          String loginname = m.get("loginname");
          String loginpwd = m.get("loginpassword");
          try {
              //1.注册数据库
              Class.forName("com.mysql.jdbc.Driver");
              //2.获取连接
              String url = "jdbc:mysql://localhost:3306/test";
              String name = "root";
              String password = "Lc283500.";
              coo = DriverManager.getConnection(url,name,password);
              //3.执行sql操作语句
              String sql = "select * from user where username= ? and userpassword= ?";
              ps = coo.prepareStatement(sql);
              ps.setString(1,loginname);
              ps.setString(2,loginpwd);
              //4.执行sql语句
              rs = ps.executeQuery();
              //5.输出数据子集
              if (rs.next()){
                  return true;
              }
          } catch (ClassNotFoundException e) {
              e.printStackTrace();
          } catch (SQLException e) {
              e.printStackTrace();
          }finally{
              try{
                  if (rs != null){
                      rs.close();
                  }
              } catch (SQLException e) {
                  e.printStackTrace();
              }
              try{
                  if (ps != null){
                      ps.close();
                  }
              } catch (SQLException e) {
                  e.printStackTrace();
              }
              try{
                  if (coo != null){
                      coo.close();
                  }
              } catch (SQLException e) {
                  e.printStackTrace();
              }
          }return false;
          //3.执行sql操作语句
          //4.执行sql语句
          //5.输出数据子集
          //6.释放资源
      }

      private static Map<String, String> init() {
          Scanner tmp = new Scanner(System.in);
          System.out.print("请输入账号：");
          String loginname = tmp.nextLine();
          System.out.print("请输入密码：");
          String loginpassword = tmp.nextLine();
          Map<String, String> m_tmp = new HashMap<>();
          m_tmp.put("loginname", loginname);
          m_tmp.put("loginpassword", loginpassword);
          return m_tmp;
      }
  }
  * 向数据库中添加数据
  import java.sql.*;
  import java.util.HashMap;
  import java.util.Map;
  import java.util.Scanner;

  public class Registeredtest {
      public static void main(String[] args) {
          //1.输入注册UI
          Map<String, String> m = new HashMap();
          m = registeredUI();
          //2.存入数据库
          boolean registeredSuccess = saveTodb(m);
          //3.输出注册结果
          System.out.println(registeredSuccess == true ? "注册成功" : "注册失败");
      }

      private static boolean saveTodb(Map<String, String> m) {
          Connection coo = null;
          PreparedStatement ps = null;
          ResultSet rs = null;
          try {
              //1.注册数据库
              Class.forName("com.mysql.jdbc.Driver");
              //2.连接数据库
              String url = "jdbc:mysql://localhost:3306/test";
              String usename = "root";
              String userpassword = "Lc283500.";
              coo = DriverManager.getConnection(url,usename,userpassword);
              //3.创建sql操作语句
              String sql = "insert into user(username,userpassword) values(?,?)";
              ps = coo.prepareStatement(sql);
              //4.执行sql语句
              ps.setString(1,m.get("name"));
              ps.setString(2,m.get("password"));
              int tmp = ps.executeUpdate();;
              if (tmp == 1){
                  return true;
              }else{
                  return false;
              }
          } catch (ClassNotFoundException e) {
              e.printStackTrace();
          } catch (SQLException e) {
              e.printStackTrace();
          }finally{
              try {
                  if(rs != null){
                      rs.close();
                  }
              } catch (SQLException e) {
                  e.printStackTrace();
              }
              try {
                  if(ps != null){
                      ps.close();
                  }
              } catch (SQLException e) {
                  e.printStackTrace();
              }
              try {
                  if(coo != null){
                      coo.close();
                  }
              } catch (SQLException e) {
                  e.printStackTrace();
              }
          }
          return false;
      }

      private static Map<String, String> registeredUI() {
          //用户输入
          Scanner tmp = new Scanner(System.in);
          System.out.print("请输入账号： ");
          String name = tmp.nextLine();
          System.out.print("请输入密码： ");
          String password = tmp.nextLine();
          //存入Map
          Map<String, String> m = new HashMap();
          m.put("name", name);
          m.put("password", password);
          return m;
      }
  }

