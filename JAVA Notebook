1、JAVA注释

  * 第一种：
    //单行注释

  * 第二种：
    /*
        多
        行
        注
        释
    */

  * 第三种：
    /**
    *   多
    *   行
    *   注
    *   释
    */
【这种为比较专业的注释可以被javadoc.exe提取为帮助文档】

2、标识符命名规范

  * 最好见名知意
  * 遵守驼峰命名方式
      SystemService
      UserService
  * 类名、接口名：首字母大写，后面每个单词字母大写。
  * 变量名、方法名：首字母小写，后面每个单词首字母大写。
  * 常量名：全部大写。

3、JAVA中单引号和双引号

 * JAVA中字符串型字面值需用双引号括起来
 * JAVA中字符型字面值需用单引号括起来
 
4、关于JAVA中的变量与数据类型

 * 变量本质上来说是内存中的一块空间，这块空间有数据类型、有名字、有字面值。
 * 变量包含三部分：数据类型、名称、字面值【数据】
 * 变量是内存中储存数据的剧基本单元
 * 数据类型是指导程序在运行阶段应该分配多大的内存空间，不同的数据类型底层会分配不同大小的空间。
 
5、八种数据类型在全局变量的默认值
 
 * 数据类型在全局变量中如果不赋值，那么将赋予默认值：
   数据类型                      默认值
   -----------------------------------
   byte short int long          0
   float double                 0.0
   boolean                      false
   char                         \u0000

6、++i和i++的区别
 
 * ++出现在变量后【i++】
 * 规则：先做赋值运算，再做自加1运算。
 int a = 100;
 int b = a ++;
 System.out.println(a); //101
 System.out.println(b); //100
 
 * ++出现在变量前【++i】
 * 规则：先进行自加1运算，然后在进行赋值操作。
 int a = 100;
 int b = ++ a;
 System.out.println(a) //101
 System.out.println(b) //101
 
7、逻辑与&和短路与&&

 * int x = 10;
   int y = 8;
   System.out.println( x < y & ++x < y );
   System.out.println(x); //11
 * int x = 10;
   int y = 8;
   System.out.println( x < y && ++x < y );
   System.out.println(x); //10
   //后面的表达式没有执行，这种现象被称为短路现象
 
 * 第一个表达式的执行结果为fasle，会发生短路与。
 * 第一个表达式的执行结果为ture，会发生短路或。
 
8、关于类的说明
 public class MethodText{ //表示一个公开的类，起名为MethodText,由于是公开的，所以源文件名必须是：MethodText(与类名相同)
     //类体
     //类体中不能直接编写java语句，除声明变量之外
     //方法出现在类体当中

     //方法
     //public表示公开的
     //static表示静态的
     //void表示方法执行结束后不返回任何数据
     //main是方法名：主方法
     //(String[] args):形式参数列表，其中String[]是一种引用数据类型，args是一个局部变量的变量名
     //主方法就要这样写，这是程序的入口，程序都是从入口开始执行的。
     public static void main(String[] args){
     }
     public static void m(){
         for(int i = 0; i < 10; i++){
             if(i == 5){
                 return; //终止的是m()方法。如果为break，则终止的是for循环。
             }
         }
     }
 }

9、方法在执行过程当中，在JVM中的内存是如何分配的了，内存是如何变化的了？
    * 方法只定义，不调用，是不会执行的，并且在JVM中也不会给该方法分配“运行所属”的内存空间。
    * 在JVM内存划分上有这样三块“主要”的内存空间：
        * 方法区内存
        * 堆内存
        * 栈内存
    * 方法代码片段存在哪里？方法执行的时候执行过程的内存在哪里分配？
        * 方法代码片段属于.class字节码文件的一部分，字节码文件在类加载的时候，将其反到了方法区当中。所以JVM中的三块主要的内存空间中方法区内存最先有数据。存放了代码片段。
        * 代码片段虽然在方法区内存中只有一份，但是可以被重复使用。每一次调用这个方法的时候，需要给该方法分配独立的活动场所，在栈内存中分配。
    * 局部变量在栈中存储，局部变量在“方法体”中声明。
10、面向对象与面向过程
    - C语言是纯面向过程的，Java是纯面向对象的，C++是半面向对象的。
    - 面相对象：主要关注点是【独立体】能完成哪些功能。例：独立显卡（面向对象）和集成显卡（面向过程）。
     * 优点：耦合度低，扩展力强。更容易解决现实世界当中更复杂的业务逻辑。组件复用性强。
     * 缺点：前期投入成本较高，需要进行独立体的抽取，大量的系统分析与设计。
    - 面向过程：主要关注点是实现的具体过程，因果关系。
     * 优点：对于业务逻辑比较简单的程序，可以快速开发，前期投入成本低。
     * 缺点：采用面向过程的方式开发很难解决非常复杂的业务逻辑，面向过程的方式导致软件元素之间的“耦合度”非常高，只要其中一环出现问题，整个系统受到影响，导致最终的软件扩展能力差。另外，由于没有独立体概念，所以无法达到组件复用。
11、面向对象
    * 面向对象三个特征
     - 封装
     - 继承
     - 多态
    * 采用面向对象开发一个软件，生命周期中
     - 面向对象的分析：OOA
     - 面向对象的设计：OOD
     - 面向对象的编程：OOP
12、类和对象
    - 什么是类？
     * 类在现实世界中是不存在的，是一个模板，是一个概念，是人类大脑思考抽象的结果。
     * 类代表了一类事物。
     * 在现实世界当中，对象A与对象B之间具有共同特征，进行抽象总结出一个模板，这个模板被称为类。
    - 什么是对象？
     * 对象是实际存在的个体，现实世界当中实际存在。
    - 类-->【实例化】-->对象
    - 对象-->【抽象】-->类。
    - 对象又被成为实例
