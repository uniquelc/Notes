1.资源分类：
    - 静态资源：html,css,js等，所有用户访问得到的结果是一样的，成为静态资源，静态资源可以直接被浏览器解析。
    - 动态资源：servlet,jsp,php,每个用户访问相同资源后，得到的结果可能不一样，动态资源被访问后需要转为静态资源，在返回给浏览器（响应）。
2.服务器：就是安装了服务器软件的计算机
    - 服务器软件：接受用户请求，处理请求，作出响应
    - web服务器软件：部署web项目，让用户通过浏览器访问这些项目
    - 常见的Java相关的web服务器软件：
        * webLogic:oracle,大型JavaEE服务器，支持所有JavaEE规范
        * webSphere:IBM,大型JavaEE服务器，支持所有JavaEE规范
        * JBOSS:大型JavaEE服务器，支持所有JavaEE规范
        * Tomcat:Apache基金组织，中小型JavaEE服务器，支持少量规范，开源，免费。
3.Tomcat配置
    - 直接将目录放入webapps目录下即可（简化部署：将项目压缩成war包）
    - 配置server.xml
        * <Context docbase="" path="/" />
        * docbase = 项目存放的路径
        * path = 虚拟目录
    - 在/usr/local/Tomcat/conf/Catalina/localhost创建一个任意名字文件.xml，里面写<Context docbase="" />
        * 虚拟目录就是xml文件的名称
4.目录结构
    - java动态目录结构
        * 项目的根目录是WEB-INF：
            * web.xml web项目核心配置文件
            * classes目录：放置字节码文件.class的目录
            * lib：放置依赖的jar包
5.Servlet
    - 就是一个接口，定义了Java类被浏览器识别/被Tomcat识别的规则
    - 执行原理
        * 当服务器接收到客户端请求，会解析url路径，获取访问Servlet的资源路径
        * 查找web.xml文件，看是否有<url-pattern>对应内容
        * 如果有再找到对应<servlet-class>全类名
        * tomcat会将字节码文件载入内存，并为其创建对象
        * 调用其方法
    - Servlet是单例的，内存中只有一个对象，因此多个用户同时访问就会存在线程安全问题
        * 解决方法就是尽量使用局部变量，少定义成员变量，即使定义了成员变量也不要对其修改值
    - Servlet声明周期
        * 被创建：执行init方法，只执行一次
            * 默认情况，Servlet第一次被访问时被创建
            * 可以制定Servlet创建时间
                *   <!--配置ServletDemo2-->
                    <servlet>
                        <servlet-name>demo2</servlet-name>
                        <servlet-class>com.web.servlet.ServletDemo2</servlet-class>
                        <!--指定Servlet创建世纪
                            1.第一次被访问时创建
                                load-on-startup为负数时，被创建，默认值为1
                            2.在服务器启动时创建
                                 load-on-startup为0或正整数时，被创建
                        -->

                        <load-on-startup>1</load-on-startup>
                    </servlet>

                    <servlet-mapping>
                        <servlet-name>demo2</servlet-name>
                        <url-pattern>/demo2</url-pattern>
                    </servlet-mapping>
        * 提供服务：执行service方法，执行多次
        * 被销毁：执行destroy方法，执只行一次
            * 服务器关闭时，Servlet被销毁，但如果不是正常关闭，它也不会执行，它在Servlet被销毁之前执行。
    - Servlet3.0
    - 支持注解配置，不需要web.xml
        * 步骤1：创建JavaEE项目，选择JavaEE6.0以上版本（Sevlet3.0以上），可以不创建web.xml
        * 步骤2：定义一个类，实现Servlet方法
        * 复写方法
        * 在类上使用@WebServlet注解进行配置
            * @WebServlet("Servlet资源路径")
    - Servlet体系结构
        * Servlet  ..接口
        *    |
        * GennericServlet  ..抽象类：将Servlet其他方法默认空实现，只将Service作为抽象方法
        *    |
        * HttpServlet  ..抽象类：对Http协议的一种封装，简化操作
                               1.定义类继承HttpServlet
                               2.复写doGet和doPost方法
    - Servlet相关配置
        * urlpartten：Sevlet访问路径
            * 一个Servlet可以有多个访问路径：WebServlet({"/demo","/demo1"})
            * 路径定义规则：
                * /xxx
                * /xxx/xxx
                * *.do
    - HTTP协议
        * 基于TCP/IP协议
        * 默认端口：80
        * 基于请求/响应模型：一次其请求对应一次响应
        * 无状态：每一次请求之间是独立的，每个请求不能进行通信
        * 请求行
            * 常见的请求方式有两种GET和POST
                * get
                    * 请求参数在请求行中
                    * url有限制长度
                * post
                    * 请求参数在请求体中
                    * url无限制长度
        * 请求头：客户端浏览器告诉服务器一些信息
            * 常见的请求头
                * 1.User-Agent：浏览器告诉服务器，浏览器的信息版本
                * 2.Referer:告诉服务器，当前请求从哪里来
                    * 第一作用：防盗令
                    * 第二作用：统计工作
        * 请求空行
        * 请求体
            * 封装POST请求消息的请求体
    - Request
        *请求过程：
            * Tomcat会根据请求url中的资源路径，创建对应的ServletDemo对象
            * Tomcat会创建两个对象，Request和Response，Request中封装请求消息数据
            * Tomcat将Request和Response两个对象传递给service方法，并调用service方法
            * 程序员可以通过Request获取请求消息，并通过Response设置响应消息数据
            * 服务器在给浏览器响应消息之前。会从Response对象中拿设置好的响应消息
        * Request对象继承体系结构
            * ServletRequest  ..接口
                    |（继承）
              HttpServletRequest  ..接口
                    |
             org.apache.catalina.connector.RequestFacade （Tomcat类）
        * Request功能
            * 获取请求消息
                * 获取请求行数据
                    * GET /today/demo?p=22 HTTP/1.1
                        * 获取请求方式方法 GET
                            * String getMethod()
                        * **获取虚拟目录 /today
                            * String getContextPath()
                        * 获取Servlet路径 /demo
                            * String getServletPath()
                        * 获取get方式的请求参数 p=22
                            * String getQueryString()
                        * **获取请求的URI,URL
                            * String getRequestURI()  /today/demo
                            * StringBuffer getRequestURL() :http://localhost/today/demo
                        * 获取协议和版本 HTTP/1.1
                            * String getProtocol()
                        * 获取客户机的IP地址
                            * String getRemoteAddr()
                * 获取请求头数据
                    * 通过球请求头的名称获取请求头的值
                        * String getHeader(String name)
                    * 获取所有请求头的名称
                        * Enumeration<String> getHeaderNames()  //Enumeration<String>类似迭代其Iterator
                * 获取请求体数据
                    * 只有POST请求才有请求体，请求体中封装了POST的请求参数
                    * 步骤1，获取流对象
                        * BufferReader getReader():获取字符输入流
                        * ServletInputStream getInputStream():获取字节输入流
                    * 步骤2，从流中拿走数据
                        * readLine()
                        * read()
            * 其他常用方法
                * 获取请求参数通用方式
                    * String getParameter(String name) : 根据参数名称获取参数值(name就返回zs，password就返回333)   name=zs&password=333
                    * String[] getParameterValues(String name) :根据参数名称获取参数值数组
                    * Enumberation<String> getParameterNames() :获取所有请求的参数名称
                    * Map<String, String[]> getParameterMap() :获取所有参数的Map集合
                        *   protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
                            Map<String, String[]> getparametermap = request.getParameterMap();
                            Set<String> keyname = getparametermap.keySet();
                            for (String name : keyname){
                                System.out.println(name);
                                String[] values = getparametermap.get(name);
                                for (String value : values){
                                    System.out.println(value);
                                    }
                                }
                            }
                    * 中文乱码问题
                        * get方式在Tomcat8以上不会乱码
                        * post会乱码：解决方法，在获取参数前，设置request流的编码为utf-8
                            * request.setCharacterEncoding("utf-8")
                * 请求转发：一种在服务器内部的资源跳转方式
                    * 通过request对象获取请求转发器对象：RequestDispatcher getRequestDispatcher(String path)
                    * 使用RequestDispatcher对象来进行转发：forward(ServletRequest request, ServletResponse response)
                    * 特点：
                        浏览器地址栏不发生变化
                        只能转发到服务器内部资源
                        转发只是一次请求
                * 共享数据
                    * 域对象：一个有作用范围的对象，可以在范围内共享数据
                    * request域：代表一次请求范围，一般用于请求转发的多个资源中共享数据
                        * 方法：
                        * setAttribute(String name, Object obj)存储数据
                        * Object getAttribute(String name)通过名字获取值
                        * void removeAttribute(String name)通过键移除键值对
                * 获取ServletContext
