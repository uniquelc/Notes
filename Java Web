1.资源分类：
    - 静态资源：html,css,js等，所有用户访问得到的结果是一样的，成为静态资源，静态资源可以直接被浏览器解析。
    - 动态资源：servlet,jsp,php,每个用户访问相同资源后，得到的结果可能不一样，动态资源被访问后需要转为静态资源，在返回给浏览器（响应）。
2.服务器：就是安装了服务器软件的计算机
    - 服务器软件：接受用户请求，处理请求，作出响应
    - web服务器软件：部署web项目，让用户通过浏览器访问这些项目
    - 常见的Java相关的web服务器软件：
        * webLogic:oracle,大型JavaEE服务器，支持所有JavaEE规范
        * webSphere:IBM,大型JavaEE服务器，支持所有JavaEE规范
        * JBOSS:大型JavaEE服务器，支持所有JavaEE规范
        * Tomcat:Apache基金组织，中小型JavaEE服务器，支持少量规范，开源，免费。
3.Tomcat配置
    - 直接将目录放入webapps目录下即可（简化部署：将项目压缩成war包）
    - 配置server.xml
        * <Context docbase="" path="/" />
        * docbase = 项目存放的路径
        * path = 虚拟目录
    - 在/usr/local/Tomcat/conf/Catalina/localhost创建一个任意名字文件.xml，里面写<Context docbase="" />
        * 虚拟目录就是xml文件的名称
4.目录结构
    - java动态目录结构
        * 项目的根目录是WEB-INF：
            * web.xml web项目核心配置文件
            * classes目录：放置字节码文件.class的目录
            * lib：放置依赖的jar包
5.Servlet
    - 就是一个接口，定义了Java类被浏览器识别/被Tomcat识别的规则
    - 执行原理
        * 当服务器接收到客户端请求，会解析url路径，获取访问Servlet的资源路径
        * 查找web.xml文件，看是否有<url-pattern>对应内容
        * 如果有再找到对应<servlet-class>全类名
        * tomcat会将字节码文件载入内存，并为其创建对象
        * 调用其方法
    - Servlet是单例的，内存中只有一个对象，因此多个用户同时访问就会存在线程安全问题
        * 解决方法就是尽量使用局部变量，少定义成员变量，即使定义了成员变量也不要对其修改值
    - Servlet声明周期
        * 被创建：执行init方法，只执行一次
            * 默认情况，Servlet第一次被访问时被创建
            * 可以制定Servlet创建时间
                *   <!--配置ServletDemo2-->
                    <servlet>
                        <servlet-name>demo2</servlet-name>
                        <servlet-class>com.web.servlet.ServletDemo2</servlet-class>
                        <!--指定Servlet创建世纪
                            1.第一次被访问时创建
                                load-on-startup为负数时，被创建，默认值为1
                            2.在服务器启动时创建
                                 load-on-startup为0或正整数时，被创建
                        -->

                        <load-on-startup>1</load-on-startup>
                    </servlet>

                    <servlet-mapping>
                        <servlet-name>demo2</servlet-name>
                        <url-pattern>/demo2</url-pattern>
                    </servlet-mapping>
        * 提供服务：执行service方法，执行多次
        * 被销毁：执行destroy方法，执只行一次
            * 服务器关闭时，Servlet被销毁，但如果不是正常关闭，它也不会执行，它在Servlet被销毁之前执行。
    - Servlet3.0
    - 支持注解配置，不需要web.xml
        * 步骤1：创建JavaEE项目，选择JavaEE6.0以上版本（Sevlet3.0以上），可以不创建web.xml
        * 步骤2：定义一个类，实现Servlet方法
        * 复写方法
        * 在类上使用@WebServlet注解进行配置
            * @WebServlet("Servlet资源路径")
    - Servlet体系结构
        * Servlet  ..接口
        *    |
        * GennericServlet  ..抽象类：将Servlet其他方法默认空实现，只将Service作为抽象方法
        *    |
        * HttpServlet  ..抽象类：对Http协议的一种封装，简化操作
                               1.定义类继承HttpServlet
                               2.复写doGet和doPost方法
    - Servlet相关配置
        * urlpartten：Sevlet访问路径
            * 一个Servlet可以有多个访问路径：WebServlet({"/demo","/demo1"})
            * 路径定义规则：
                * /xxx
                * /xxx/xxx
                * *.do
    - HTTP协议
        * 基于TCP/IP协议
        * 默认端口：80
        * 基于请求/响应模型：一次其请求对应一次响应
        * 请求消息：客户端发送给服务器的数据
        * 响应消息：服务器发送给可客户端的数据
        * 无状态：每一次请求之间是独立的，每个请求不能进行通信
        * 请求行
            * 常见的请求方式有两种GET和POST
                * get
                    * 请求参数在请求行中
                    * url有限制长度
                * post
                    * 请求参数在请求体中
                    * url无限制长度
        * 请求头：客户端浏览器告诉服务器一些信息
            * 常见的请求头
                * 1.User-Agent：浏览器告诉服务器，浏览器的信息版本
                * 2.Referer:告诉服务器，当前请求从哪里来
                    * 第一作用：防盗令
                    * 第二作用：统计工作
        * 请求空行
        * 请求体
            * 封装POST请求消息的请求体
    - Request
        *请求过程：
            * Tomcat会根据请求url中的资源路径，创建对应的ServletDemo对象
            * Tomcat会创建两个对象，Request和Response，Request中封装请求消息数据
            * Tomcat将Request和Response两个对象传递给service方法，并调用service方法
            * 程序员可以通过Request获取请求消息，并通过Response设置响应消息数据
            * 服务器在给浏览器响应消息之前。会从Response对象中拿设置好的响应消息
        * Request对象继承体系结构
            * ServletRequest  ..接口
                    |（继承）
              HttpServletRequest  ..接口
                    |
             org.apache.catalina.connector.RequestFacade （Tomcat类）
        * Request功能
            * 获取请求消息
                * 获取请求行数据
                    * GET /today/demo?p=22 HTTP/1.1
                        * 获取请求方式方法 GET
                            * String getMethod()
                        * **获取虚拟目录 /today
                            * String getContextPath()
                        * 获取Servlet路径 /demo
                            * String getServletPath()
                        * 获取get方式的请求参数 p=22
                            * String getQueryString()
                        * **获取请求的URI,URL
                            * String getRequestURI()  /today/demo
                            * StringBuffer getRequestURL() :http://localhost/today/demo
                        * 获取协议和版本 HTTP/1.1
                            * String getProtocol()
                        * 获取客户机的IP地址
                            * String getRemoteAddr()
                * 获取请求头数据
                    * 通过球请求头的名称获取请求头的值
                        * String getHeader(String name)
                    * 获取所有请求头的名称
                        * Enumeration<String> getHeaderNames()  //Enumeration<String>类似迭代其Iterator
                * 获取请求体数据
                    * 只有POST请求才有请求体，请求体中封装了POST的请求参数
                    * 步骤1，获取流对象
                        * BufferReader getReader():获取字符输入流
                        * ServletInputStream getInputStream():获取字节输入流
                    * 步骤2，从流中拿走数据
                        * readLine()
                        * read()
            * 其他常用方法
                * 获取请求参数通用方式
                    * String getParameter(String name) : 根据参数名称获取参数值(name就返回zs，password就返回333)   name=zs&password=333
                    * String[] getParameterValues(String name) :根据参数名称获取参数值数组
                    * Enumberation<String> getParameterNames() :获取所有请求的参数名称
                    * Map<String, String[]> getParameterMap() :获取所有参数的Map集合
                        *   protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
                            Map<String, String[]> getparametermap = request.getParameterMap();
                            Set<String> keyname = getparametermap.keySet();
                            for (String name : keyname){
                                System.out.println(name);
                                String[] values = getparametermap.get(name);
                                for (String value : values){
                                    System.out.println(value);
                                    }
                                }
                            }
                    * 中文乱码问题
                        * get方式在Tomcat8以上不会乱码
                        * post会乱码：解决方法，在获取参数前，设置request流的编码为utf-8
                            * request.setCharacterEncoding("utf-8")
                * 请求转发：一种在服务器内部的资源跳转方式
                    * 通过request对象获取请求转发器对象：RequestDispatcher getRequestDispatcher(String path)
                    * 使用RequestDispatcher对象来进行转发：forward(ServletRequest request, ServletResponse response)
                    * 特点：
                        浏览器地址栏不发生变化
                        只能转发到服务器内部资源
                        转发只是一次请求
                * 共享数据
                    * 域对象：一个有作用范围的对象，可以在范围内共享数据
                    * request域：代表一次请求范围，一般用于请求转发的多个资源中共享数据
                        * 方法：
                        * setAttribute(String name, Object obj)存储数据
                        * Object getAttribute(String name)通过名字获取值
                        * void removeAttribute(String name)通过键移除键值对
                * 获取ServletContext
                    * 代表整个web应用，可以和web程序的容器（服务器）通信
                    * 获取
                        * 通过request对象，request.getServletContext()获取
                        * 通过HttpServlet获取，this.getServletContext()获取
                        * 功能：
                            * 获取MIME类型:在互联网通讯过程中定义的一种类型
                                 * 格式：大类型/小类型  text/html    image/jpeg
                                 * 获取：getMimeType(String file)
                            * 域对象：共享数据
                                *域范围：所有用户请求的数据
                                *setAttribute(String name,Object obj)
                                *getAttribute(String name)
                                *removeAttribute(Sting name)
                            * 获取文件真实（服务器）路径
                                * String getRealPath()
                                    *   ServletContext servletContext1 = this.getServletContext();
                                        String a = servletContext1.getRealPath("/a.txt");  //web目录下的文件
                                        System.out.println(a);
                                        String c = servletContext1.getRealPath("/WEB-INF/a.txt");  //WEB-INF目录下的文件
                                        System.out.println(c);
                                        String a = servletContext1.getRealPath("WEB-INF/classes/a.txt");  //src目录下的文件
                                        System.out.println(a);
                    * 动态获取虚拟目录
                        * getContextPath()方法
    * JavaBean
        * 标准的Java类
            * 类必须被public修饰
            * 必须提供空参构造器
            * 有setter and getter
            * 成员变量必须私有
        * 方法
            * getProperty()
            * setProperty()
            * populate(Object obj, Map map)将map集合键值对对象封装到JavaBean中
    * Response
        *功能：设置响应消息
            * 设置响应行
                * 格式：HTTP/1.1 200 ok
                * 响应状态码：服务器告诉客户端浏览器本次请求和响应的状态
                    * 1xx:服务器接受客户端消息但是没有接收完成，等待一段消息后，发送1xx状态玛
                    * 2xx:成功，代表：200
                    * 3xx:重定向，代表：302（重定向），304（访问缓存）
                    * 4xx:客户端错误，代表 404（请求路径没有对应的资源）405（请求方式没有对应的doXXX方法）
                    * 5xx:服务器端错误，代表 500（服务器内部出现异常）
                * 设置状态码设置：setStatus(int sc)
            * 设置响应头:setHeader(String name, String value)
                response.setCharacterEncoding("utf-8");
                //告诉浏览器服务器发送数据的编码格式
                response.setHeader("content-type","text/html;charset=utf-8");
                //获取输出流
                PrintWriter pw = response.getWriter();
                //输出数据
                pw.write("你好 Response");
                * Content-Type:服务器告诉客户端本次响应体数据格式以及编码格式
                    * response.setContentType("text/html;utf-8");
                * Content-dispostion:服务器告诉客户端以什么 格式打开我的响应体数据
            * 设置响应体：传输的数据
                * 和request一样通过流的方式进行响应
                * 获取输出流
                    * 字节输出流：PrintWrite getWrite()
                    * 字符输出流：ServletOutputStream getOutputStream()
                * 使用输出流，将数据输出到客户端浏览器
        * 重定向
            *   System.out.println("Demo1...");
                //设置状态码为302
                response.setStatus(302);
                //重定向至/responseDemo2
                response.setHeader("location","/responseDemo2");
            * 重定向方法
                * 简单的方法：sendRedirect("PATH")  
                //动态获取虚拟路径
                * String contextpath = request.getContextPath();
                * response.sendRedirect(contextpath + "/responseDemo2");
            * 重定向的特点 redirect
                * 地址栏发生变化
                * 重定向可以访问其他服务器的资源
                * 重定向是两次请求，不能使用request共享数据
            * 转发的特点 forward
                * 转发地址栏路径不变
                * 转发只能转发当前服务器下的资源
                * 转发是一次请求
        * 服务器输出字符数据到浏览器
            * 
6.会话：一次会话中包含了多次请求和响应
    * 功能：在一次会话的范围内的多次请求间，共享数据
    * 方式：客户端会话技术（Cookie），服务器会话技术（Session）
    * Cookie :将数据保存到客户端
        * 原理
            * response通过HTTP协议中的set-cookie响应头将Cookie传入客户端
            * request通过HTTP协议中的Cookie请求头将Cookie传入服务器
        * 使用步骤
            * 创建Cookie对象，绑定数据
                * new Cookie(String name, String value)
            * 发送Cookie
                * response.addCookie(Cookie cookie)
            * 获取Cookie拿到数据
                * Cookie[] requset.getCookies()
        * 细节学习
            * 一次可不可以发送多个Cookie
                * 创建多个Cookie对象即可
            * Cookie在浏览器中保存多久
                * 默认情况，浏览器关闭即关闭（储存在浏览器内存中）
                * 持久化存储：
                    * setMaxAge(int seconds)方法
                        * seconds为正数：将Cookie数据写到硬盘的文件中，seconds数表示存活时间，时见到就被销毁
                        * seconds为负数：默认值
                        * seconds为零：删除Cookie信息
            * Cookie能不能保存中文
                * Tomcat8之后可以
            * Cookie共享
                * 一个Tomcat服务器里有多个项目，这些项目能否共享Cookie数据
                    * 默认不能共享
                    * setPath(String Path)设置Cookie获取范围
                        * 可以将Path设置为"/"共享
                * 多个服务器集之间共享
                    * setDomain(String path) :如果一级域名相同那么可以共享
                        * setDomain(".baidu.com")，这样的话tieba.baidu.com和news.baidu.com可以共享
7.JSP
    * Java Server Pages(JSP)
        * 理解为一个特殊的页面，其中既可以直接定义html标签又可以写Java代码
        * 用于简化书写
        * JSP本质上就是Servlet
        * JSP指令：配置JSP页面，导入资源文件
            * 格式：<%@ 指令名称 属性名1=属性值 属性名2=属性值 ...%>
            * 分类
                * page：配置JSP页面
                    * contentType:等同于response.setContenttype()
                        * 设置响应体的mime类型以及字符集
                        * 设置当前jsp页面的编码
                * include：页面包含的，导入页面的资源文件
                    * <%@include file="其他jsp页面"%>
                * taglib：导入资源
                    * <%@ taglib prefix="c" uri="PATH"%>
                    * prefix表示前缀
        * JSP注释
            * html注释：<!-- --> 只能注释html
            * jsp注释：<%-- --%> 可以注释所有
        * JSP的脚本:JSP定义了Java代码的方式
            * <% 代码 %> ：定义的Java代码在service方法中，service方法中可以定义什么，该脚本中就可以定义什么
            * <%! 代码 %> ：定义的成员，可定义变量或方法
            * <%= 代码 %> ：定义Java代码会输出到页面上
        * JSP的内置对象
            * 在JSP中不需要获取和创建，可以直接使用的对象
            * JSP一共有9个内置对象
                * out:字符输出流对象，可以将数据输出到页面上,和response.getWriter()类似
                * response:响应对象
                * pageContext：当前页面共享数据
                * request：一次请求访问的多个资源
                * session：一次会话的多个请求
                * application：所有用户间共享数据
                * page：当前（Servlet）页面的共享数据
                * config：Servlet配置对象
                * exception：异常对象
    * EL表达式：替换JSP中Java代码的编写
        * 语法：${表达式}
        * 忽略EL表达式，在表达式前面加上转移符/${表达式}
        * 使用范围
            * 运算
                * 运算符
                    * 算术运算符：+-*/(div)%(mod)
                    * 比较运算符: == > < >= <= !=
                    * 逻辑运算符: &&(and) ||(or) !(not)
                    * 空运算符:empty() 可判断字符串，数组，集合的长度是否为0 ${empty list},${not empty list}（判断不为空并且长度大于0）
            * 获取值
                * 从域对象中获取值
                    * 语法
                        * 第一种语法：${域名称.键名} ，从指定域中获取指定键的值
                        * 例如：在request域中存储了name=张三
                                * 获取：：${requestScope.name}
                            * 域名称pageScope -->pageContext
                            * 域名称requestScope -->request
                            * 域名称sessionScope -->session
                            * 域名称applicationScope -->application(ServletContext)
                        * 第二种语法：${name}
                    * 获取域中对象的值
                        * ${域名称.键名.属性名} 属性名：getName-->Name-->name(去get变小写)
                * 从List中获取值
                    * ${域名称.键名[索引]} (越界不会报错)
                * 从Map集合中获取值
                    * ${域名称.键名.key名称}
                    * ${域名称.键名[key名称]}
8.Session
    * 服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器中。HttpSession
    * 快速入门：
        * HttpSession对象：
            * Object getAttribute(String name)
            * void setAttribute(String name, Object value)
            * void removeAttribute(String name)
        * Session的实现是依赖于Cookie的
        * 细节
            * 客户端关闭，服务器不关闭，两次Session是否为同一个
                * 不是,因为客户端浏览器关闭会话结束，session肯定不为同一个
                * 解决方法：创建一个cookie，键为JSESSIONID，将session存入，设置存活时间即可
            * 客户端不关闭，服务器关闭，两次Session是否为同一个
                * 不是，但是要确保数据不丢失
                * Session的钝化（序列化）
                    * 在服务器正常关闭之前，将session序列化到硬盘上
                * Session的活化（反序列化）
                    * 在服务器启动后，将session文件转化为内存中的session对象
            * Session的生命周期
                * seesion调同对象invalidate()方法会自杀
                * session默认失效时间30分钟
            * Session的特点
                * session用于储存一次会话的多次请求的数据，存在服务器端
                * session可以存储任意类型，任意大小的数据
            * Session与Cookie的区别
                * Session存储在服务器端，Cookie存储在客户端
                * Session没有大小类型限制,Cookie有限制
                * Session的数据存在服务器端，比较安全，Cookie相对不安全
9.MVC开发模式
    * M：Model
    * V：View
    * C：Controller
        * 控制器Controller用处
            * 获取客户端输入
            * 调用模型（处理数据）
            * 将数据交给视图展示
        * 模型Model用处
            * 业务逻辑操作（查询数据库，封装数据）
        * 视图View用处
            * 展示数据
    * 在JSP+Servlet+JavaBean模式中，Model充当JavaBean，Controller充当Servlet，View充当JSP
